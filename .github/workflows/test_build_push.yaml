name: Test Submodule


on:
  pull_request:
    branches:
      - dev
      - stg
      - main
    types:
      - opened    
      - synchronize


env: 
#  ENVIRONMENT: environments/dev
  ECS_TASK_DEFINITION: taskdefinition.json
  ECR_REPOSITORY: MY_ECR_REPOSITORY
  CONTAINER_NAME: backend-1
  ECS_SERVICE: backend-1-service

jobs:
  BackEnd_CI:
    environment: production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout  
      uses: actions/checkout@v4
      with:
        submodules: recursive



# ----------------------------------------

# Set up run time and build
# https://docs.github.com/en/actions/automating-builds-and-tests


    - name: test and upload test result
      run: |
        
        mkdir results
        touch results/sample.txt
        date >> results/sample.txt
      # continue-on-error: true

    - name: Upload Unit Test Results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Unit Test Results
        path: results/*.txt
        # retention-days: 5
# ----------------------------------------


# configure AWS credential

# AWS credential
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

# Docker build & test

    - name: Test Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: testResistory
        # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.event.pull_request.head.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}


    - name: Upload rendered task-definition for deployment
      uses: actions/upload-artifact@v4
      with:
        name: task-definition-for-${{ env.ECS_SERVICE }}
        path: ${{ steps.task-def.outputs.task-definition }}
        

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true